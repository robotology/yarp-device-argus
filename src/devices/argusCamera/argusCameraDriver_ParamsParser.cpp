/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Wed Jul  3 11:11:06 2024


#include "argusCameraDriver_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(argusCameraDriverParamsCOMPONENT, "yarp.device.argusCameraDriver")
}


argusCameraDriver_ParamsParser::argusCameraDriver_ParamsParser()
{
}


std::vector<std::string> argusCameraDriver_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("d");
    params.push_back("period");
    params.push_back("rotation");
    params.push_back("width");
    params.push_back("height");
    params.push_back("rotation_with_crop");
    return params;
}


bool      argusCameraDriver_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(argusCameraDriverParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter d
    {
        if (config.check("d"))
        {
            m_d = config.find("d").asInt64();
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'd' using value:" << m_d;
        }
        else
        {
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'd' using DEFAULT value:" << m_d;
        }
        prop_check.unput("d");
    }

    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asFloat64();
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'period' using DEFAULT value:" << m_period;
        }
        prop_check.unput("period");
    }

    //Parser of parameter rotation
    {
        if (config.check("rotation"))
        {
            m_rotation = config.find("rotation").asFloat64();
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'rotation' using value:" << m_rotation;
        }
        else
        {
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'rotation' using DEFAULT value:" << m_rotation;
        }
        prop_check.unput("rotation");
    }

    //Parser of parameter width
    {
        if (config.check("width"))
        {
            m_width = config.find("width").asInt64();
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'width' using value:" << m_width;
        }
        else
        {
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'width' using DEFAULT value:" << m_width;
        }
        prop_check.unput("width");
    }

    //Parser of parameter height
    {
        if (config.check("height"))
        {
            m_height = config.find("height").asInt64();
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'height' using value:" << m_height;
        }
        else
        {
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'height' using DEFAULT value:" << m_height;
        }
        prop_check.unput("height");
    }

    //Parser of parameter rotation_with_crop
    {
        if (config.check("rotation_with_crop"))
        {
            m_rotation_with_crop = config.find("rotation_with_crop").asBool();
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'rotation_with_crop' using value:" << m_rotation_with_crop;
        }
        else
        {
            yCInfo(argusCameraDriverParamsCOMPONENT) << "Parameter 'rotation_with_crop' using DEFAULT value:" << m_rotation_with_crop;
        }
        prop_check.unput("rotation_with_crop");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(argusCameraDriverParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(argusCameraDriverParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      argusCameraDriver_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: argusCameraDriver\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'d': Enumeration of the camera device\n");
    doc = doc + std::string("'period': Refresh period of acquistion of the camera in s\n");
    doc = doc + std::string("'rotation': Rotation applied from the center of the image\n");
    doc = doc + std::string("'width': Width of the images requested to the camera\n");
    doc = doc + std::string("'height': Height of the images requested to the camera\n");
    doc = doc + std::string("'rotation_with_crop': The rotation, if the param is true, is obtained swapping x with y\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device argusCamera --d 0 --period 0.033 --rotation 0.0 --width 640 --height 480 --rotation_with_crop false\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device argusCamera\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
